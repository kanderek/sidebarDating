{
  "name": "connect-pgclient",
  "description": "Connect middleware to manage Postgres connections.",
  "version": "0.3.0",
  "author": {
    "name": "Andrew Chilton",
    "email": "andychilton@gmail.com",
    "url": "http://chilts.org/blog/"
  },
  "homepage": "https://github.com/chilts/connect-pgclient",
  "main": "./connect-pgclient.js",
  "devDependencies": {},
  "dependencies": {
    "pg": "*"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/chilts/connect-pgclient.git"
  },
  "bugs": {
    "url": "http://github.com/chilts/connect-pgclient/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/chilts/connect-pgclient/raw/master/LICENSE"
    }
  ],
  "keywords": [
    "connect",
    "express",
    "middleware",
    "postgres",
    "node-pg",
    "pg",
    "pgclient"
  ],
  "scripts": {},
  "readme": "```\n _______  _______  _        _        _______  _______ _________                \n(  ____ \\(  ___  )( (    /|( (    /|(  ____ \\(  ____ \\\\__   __/                \n| (    \\/| (   ) ||  \\  ( ||  \\  ( || (    \\/| (    \\/   ) (                   \n| |      | |   | ||   \\ | ||   \\ | || (__    | |         | |                   \n| |      | |   | || (\\ \\) || (\\ \\) ||  __)   | |         | |                   \n| |      | |   | || | \\   || | \\   || (      | |         | |                   \n| (____/\\| (___) || )  \\  || )  \\  || (____/\\| (____/\\   | |                   \n(_______/(_______)|/    )_)|/    )_)(_______/(_______/   )_(                   \n                                                                               \n        _______  _______  _______  _       _________ _______  _       _________\n       (  ____ )(  ____ \\(  ____ \\( \\      \\__   __/(  ____ \\( (    /|\\__   __/\n       | (    )|| (    \\/| (    \\/| (         ) (   | (    \\/|  \\  ( |   ) (   \n _____ | (____)|| |      | |      | |         | |   | (__    |   \\ | |   | |   \n(_____)|  _____)| | ____ | |      | |         | |   |  __)   | (\\ \\) |   | |   \n       | (      | | \\_  )| |      | |         | |   | (      | | \\   |   | |   \n       | )      | (___) || (____/\\| (____/\\___) (___| (____/\\| )  \\  |   | |   \n       |/       (_______)(_______/(_______/\\_______/(_______/|/    )_)   )_(   \n                                                                               \n```                                                                               \n\nThis module is aimed at taking the pain away from managing your Postgres connections from within a connect/express\napp. Too many times has ```res.redirect()``` been used and left the DB connection hanging.\n\n```bash\nnpm install connect-pgclient\n```\n\n```connect-pgclient``` helps you manage (and free) your Postgres database connections so you don't have to. It\nautomatically gets a client from ```node-pg``` at the start of the request and calls ```done()``` at the end of the\nrequest to automatically return the client back to pg's pool. This way you'll never lose any clients by accidentally\nnot calling ```done```.\n\n## Example ##\n\n```javascript\nvar pgclient = require('connect-pgclient');\n\nvar dbMiddleware = pgclient({\n    config : {\n        database : 'dbname',\n        user     : 'me',\n        host     : 'dbserver.internal',\n    },\n});\n\napp.get(\n    '/',\n    dbMiddleware,\n    function(req, res, next) {\n        // here you can use req.db.client to perform queries\n        next();\n    },\n    function(req, res) {\n        res.send('Ok');\n    }\n    // req.db.done is automatically called to release the client\n);\n```\n\n## What does this package solve? ##\n\nIf you are trying to do your Pg clients manually, then there are various cases which you might forget about where you\nshould call ```done()```. Here is an example when you have a client but call ```res.redirect()``` and forget to release\nit again:\n\n```javascript\napp.get(\n    '/',\n    connectToDb,\n    selectSomethingFromDb,\n    function(req, res) {\n        if ( somethingWasntFound ) {\n            return res.redirect('/');\n            // bang, you just lost a DB client\n        }\n        next();\n    },\n    // must remember to release here, otherwise you'll lose another DB client\n    disconnectFromDb,\n    function(req, res) {\n        res.send('Ok');\n    }\n);\n```\n\nUsing ```connect-pgclient``` you'll be able to do this:\n\n```javascript\napp.get(\n    '/',\n     // middleware you created using connect-pgclient\n    dbMiddleware,\n    selectSomethingFromDb,\n    function(req, res) {\n        if ( somethingWasntFound ) {\n            return res.redirect('/');\n            // client is automatically released\n        }\n        next();\n    },\n    function(req, res) {\n        res.send('Ok');\n    }\n    // client is automatically released\n);\n```\n\n## Usage ##\n\nOnce you have setup and called your ```connect-pgclient``` middleware, you Postgres client is available on the\n```req``` object as follows:\n\n```javascript\n// the node-pg client\nreq.db.client\n\n// the done function which node-pg needs to return the client to the pool\nreq.db.done\n\n// boolean to show us whether we are in the middle of a transaction\nreq.db.transaction\n```\n\nIn general, you should only ever use the ```req.db.client``` property of ```req.db```.\n\n## Options ##\n\n* config - the database connection params as defined in [node-postgres](https://github.com/brianc/node-postgres/wiki/Client#parameters)\n* transaction - (default: false) States whether to BEGIN and COMMIT a transaction for you.\n* log - (default: no-op) a function to call with log messages to help with debugging (usually dev only)\n\n## Examples ##\n\n### Connect to DB for Every Request ###\n\nYou may or may not want to do this, but it shows a good example for starters:\n\n```javascript\nvar pgclient = require('connect-pgclient');\n\napp.use(pgclient({\n    config : {\n        database : 'dbname',\n        user     : 'me',\n        host     : 'dbserver.internal',\n    },\n}));\n```\n\nIf you would like ```connect-pgclient``` to BEGIN and COMMIT a transaction for you, then just pass the\n```transaction``` param as ```true``` into the options.\n\n```javascript\nvar pgclient = require('connect-pgclient');\n\napp.use(pgclient({\n    config : {\n        database : 'dbname',\n        user     : 'me',\n        host     : 'dbserver.internal',\n    },\n    transaction : true,\n}));\n```\n\n### Connect to the DB within Specific Routes ###\n\nThe database clients are released back to ```node-pg``` even if the request ends in ```res.send()```,\n```res.redirect()```, ```res.json()```, ```res.render()``` or even in error ```next(err)```.\n\nFor example:\n\n```javascript\n// Postgres middleware which gets a Pg client and releases it after\n// the request has been fulfilled.\nvar connectToDb = pgclient({\n    config : {\n        database : 'dbname',\n        user     : 'me',\n        host     : 'dbserver.internal',\n    },\n});\n\n// Postgres middleware which gets a Pg client, starts a transaction\n// and commits and releases it after the request has been fulfilled.\nvar connectToDbWithTransaction = pgclient({\n    config : {\n        database : 'dbname',\n        user     : 'me',\n        host     : 'dbserver.internal',\n    },\n    transaction : true,\n});\n\n// a route which always succeeds - Pg client is released ok\napp.get(\n    '/',\n    connectToDb,\n    function(req, res) {\n        res.send('My Homepage - Under Construction!');\n    }\n);\n\n// a route which redirects 50% of the time - Pg client is released ok\napp.get(\n    '/random',\n    connectToDb,\n    function(req, res) {\n        if ( Math.random() < 0.5 ) {\n            // even though we're not calling node-pg's done(), connect-pgclient does it for us even here\n            res.redirect('/');\n        }\n        else {\n            res.send('My Homepage - Under Construction!');\n        }\n    }\n);\n\n// a route which dies 50% of the time - Pg client is released ok\napp.get(\n    '/roulette',\n    connectToDbWithTransaction,\n    function(req, res, next) {\n        // this is how you get your freshly minted Postgres client\n        req.db.client(\"SELECT now()\", next);\n    },\n    function(req, res, next) {\n        if ( Math.random() < 0.5 ) {\n            // even though we're not calling node-pg's done(), connect-pgclient does it for us even here\n            next(new Error(\"Die die die!\"));\n        }\n        else {\n            res.send('My Homepage - Under Construction!');\n        }\n    }\n);\n```\n\n## How it Works ##\n\nUsing [brianc](https://github.com/brianc/)'s excellent [pg](https://npmjs.org/package/pg) library, we connect to the\ndatabase and store both the ```client``` and the ```done``` function onto the ```req``` so that we can use the client\nin our routes, but also automatically call ```done``` when the request has finished.\n\n```connect-pgclient``` works much like connect's ```session``` middleware in that it wraps ```res.end()``` so that we\ncan get control both before and after the request has been fulfilled, which allows us to give the client back to pg's\npool automatically no matter what happened during the request.\n\n## Caveat ##\n\nWhen you use ```connect-pgclient``` to give you a client and automatically start a transaction, if the request ends up\nin error, the transaction still has ```COMMIT``` performed. In this error case, I think ```ROLLBACK``` should be called\ninstead but I'm not yet sure how to detect if the request is in the error state.\n\n(Note: remember that this is *after* the request has been fulfilled, which is after any error middleware has been run.)\n\n# Author #\n\nWritten by [Andrew Chilton](http://chilts.org/) - [Blog](http://chilts.org/blog/) -\n[Twitter](https://twitter.com/andychilton).\n\n# License #\n\n* [Copyright Â© 2013 Andrew Chilton.  All rights reserved.](http://chilts.mit-license.org/2013/)\n\n(Ends)\n",
  "readmeFilename": "README.md",
  "_id": "connect-pgclient@0.3.0",
  "dist": {
    "shasum": "1574d1c388f028cc880b80352b433ee265ec5eee"
  },
  "_from": "connect-pgclient@",
  "_resolved": "https://registry.npmjs.org/connect-pgclient/-/connect-pgclient-0.3.0.tgz"
}
