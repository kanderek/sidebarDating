{
  "name": "ziptastic",
  "version": "0.1.0",
  "author": {
    "name": "Ben Drucker",
    "email": "bvdrucker@gmail.com"
  },
  "description": "A small wrapper around the Ziptastic ZIP lookup service",
  "main": "ziptastic.js",
  "dependencies": {
    "request": "~2.27.0",
    "bluebird": "~1.0.0",
    "lodash": "~2.4.1"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/bendrucker/node-ziptastic.git"
  },
  "license": "MIT",
  "devDependencies": {
    "nock": "~0.22.1",
    "chai": "~1.8.1",
    "mocha": "~1.17.0",
    "sinon": "~1.7.3",
    "sinon-chai": "~2.4.0",
    "mocha-as-promised": "~2.0.0",
    "chai-as-promised": "~4.1.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "readme": "# Ziptastic [![Build Status](https://travis-ci.org/bendrucker/node-ziptastic.png?branch=master)](https://travis-ci.org/bendrucker/node-ziptastic) [![NPM version](https://badge.fury.io/js/ziptastic.png)](http://badge.fury.io/js/ziptastic)\n\nUse the [Ziptastic](http://daspecster.github.io/ziptastic/) API to retrieve city and state information from a zip code.\n\n## Getting Started\n\nInstall from [npm](https://npmjs.org/package/ziptastic):\n\n```shell\nnpm install ziptastic\n```\n\n## Executing Queries\n\n##### `ziptastic(options, [callback])` -> `promise`\n\nThe library exposes the ZIP parser function directly. It returns a promise, but will also call a node-style callback if one is passed in.\n\n```javascript\nvar ziptastic = require('ziptastic');\nvar query = {\n\tzip: '10000',\n\tcountry: 'US'\n};\n```\n\nUsing promises:\n\n```javascript\nziptastic(query).then(function(location) {\n\t// location => {city: \"New York City\", state: \"New York\", country: \"US\"}\n});\n```\n\nUsing callbacks: \n\n```javascript\nziptastic(query, function(err, location) {\n\t// location => {city: \"New York City\", state: \"New York\", country: \"US\"}\n});\n```\n\nThe function expects an object with properties `zip` and `country`. If no country is provided, it defaults to `US`. If the `options` argument is a number or numeric string, the library will assume it is a zip code in the US. All of the following are equivalent to the original query: \n\n```javascript\nziptastic(10000);\nziptastic('10000');\nziptastic({zip: '10000'});\n```\n\n## Custom Instances\nYou can construct custom instances with your own endpoint if you're running the [ziptastic application](https://github.com/daspecster/ziptastic) on your own server. The constructor is stored on the parser function:\n\n```javascript\nvar ziptastic = ziptastic.create('http://mycustomendpoint.com');\n```\n\n`ziptastic.create` returns the `parse` function bound to an instance with your `endpoint`. You can also get full access to the instance using:\n\n```javascript\nvar ziptastic = new ziptastic.Ziptastic([endpoint]);\n```\n\n## Handling Errors\n\nThe library will automatically convert HTTP status codes >= 400 into errors. Catch them using promises:\n\n```javascript\nziptastic('100').catch(function(err) {\n\terr instanceof Error // => true\n});\n```\n\nOr callbacks:\n```javascript\nziptastic('100', function(err, location) {\n\terr instanceof Error // => true\n});\n```\n\nThe error stores the raw response object from [request](https://github.com/mikeal/request) as `err.response` for easy debugging.\n\n## Tests\n\n```shell\nnpm test\n```\n\n## License\n\n[MIT License](LICENSE.md)",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/bendrucker/node-ziptastic/issues"
  },
  "_id": "ziptastic@0.1.0",
  "dist": {
    "shasum": "928fdb38c5e1edbf94032d8cbfb2583c1c2f07e9"
  },
  "_from": "ziptastic@",
  "_resolved": "https://registry.npmjs.org/ziptastic/-/ziptastic-0.1.0.tgz"
}
